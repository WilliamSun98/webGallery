/* jshint esversion: 6 */

const express = require('express');
const app = express();
const path = require('path');
const crypto = require('crypto');
const cookie = require('cookie');

const session = require('express-session');
app.use(session({
    secret: 'william secrete',
    resave: false,
    saveUninitialized: true,
}));

let multer = require('multer');
let upload = multer({dest: 'uploads/'});

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.use(express.static('frontend'));

app.use(function (req, res, next){
    console.log("HTTP request", req.method, req.url, req.body);
    next();
});

app.use(function(req, res, next){
    req.user = ('username' in req.session) ? req.session.username : null;
    next();
});

let DataStore = require('nedb');
let images = new DataStore({filename: 'db/images.db', autoload: true, timestampData: true});
let comments = new DataStore({filename:'db/comments.db', autoload: true, timestampData: true});
let users = new DataStore({filename: 'db/users.db', autoload: true, timestampData: true});


// generateSalt function copied from the lab
function generateSalt () {
    return crypto.randomBytes(16).toString('base64');
}

// generateHash function copied from the lab
function generateHash (password, salt) {
    let hash = crypto.createHmac('sha512', salt);
    hash.update(password);
    return hash.digest('base64');
}


let isAuthenticated = function(req, res, next) {
    if (!req.user) return res.status(401).end("access denied");
    next();
};

/*    POST methods   */
// add a image to the database
app.post('/api/images/', upload.single('picture'), isAuthenticated, function(req, res, next) {
    images.findOne({}).sort({createdAt:-1}).limit(1).exec(function(err, prev_image) {
        if (err) return res.status(500).end(err.message);

        let today = new Date();
        // if this image is the first image, then there is no need to update its
        // previous image's nextImageId attribute
        if (prev_image === null) {
            let image = {
                prevImageId: -1,
                nextImageId: -1,
                title: req.body.title,
                author: req.session.username,
                image: req.file,
                date: today.getDate(),
                currentCommentPage: 0
            };
            images.insert(image, function (err, res){
                if (err) return res.status(500).end('insert error');
            });
            // this is used to get the newImage with its _id generated by the database
            images.findOne({}).sort({createdAt: -1}).limit(1).exec(function(err, newImage) {
                if (err) return res.status(500).end(err.message);
                return res.json(newImage);
            });
        // if this image is not the first image, then update it prevImageId attribute and update
        // its previous image's nextImageId
        } else {
            let image = {
                prevImageId: prev_image._id,
                nextImageId: -1,
                title: req.body.title,
                author: req.session.username,
                image: req.file,
                date: today.getDate(),
                currentCommentPage: 0
            };
            images.insert(image, function (err, res){
                if (err) return res.status(500).end('insert error');
            });
            // this is used to get the newImage with its _id generated by the database
            images.findOne({}).sort({createdAt:-1}).limit(1).exec(function(err, newImage) {
                if (err) return res.status(500).end('insert error');
                images.update({_id: prev_image._id}, {$set: {nextImageId: newImage._id}}, {}, function(err, res){
                    if (err) return err.status(500).end(err.message);
                });
                return res.json(newImage);
            });
        }
    });
});


// add a new comment to the database
app.post('/api/comments/', isAuthenticated, function(req, res, next) {
    let today = new Date();
    let comment = {
        imageId: req.body.imageId,
        author: req.session.username,
        content: req.body.content,
        date: today.getDate()
    };
    comments.insert(comment, function (err, res){
        if (err) return res.status(500).end('insert error');
    });
    return res.json(comment);
});


// this is the signup function copied from lab
app.post('/signup/', function (req, res, next) {
    var username = req.body.username;
    var password = req.body.password;

    users.findOne({_id: username}, function(err, user){
        if (err) return res.status(500).end(err.message);
        if (user) return res.status(409).end("username " + username + " already exists");

        var salt = generateSalt();
        var saltedHash = generateHash(password, salt);

        users.update({_id: username},{_id: username, password: saltedHash, salt: salt}, {upsert: true}, function(err){
            if (err) return res.status(500).end(err);
            // initialize cookie
            res.setHeader('Set-Cookie', cookie.serialize('username', username, {
                path : '/',
                maxAge: 60 * 60 * 24 * 7
            }));
            req.session.username = username;
            return res.json("user " + username + " signed up");
        });
    });
});

// this is the signin function copied from lab
app.post('/signin/', function (req, res, next) {
    let username = req.body.username;
    let password = req.body.password;
    // retrieve user from the database
    users.findOne({_id: username}, function(err, user){
        if (err) return res.status(500).end(err);
        if (!user) return res.status(401).end("empty user access denied");

        let saltedHash = generateHash(password, user.salt);

        if (user.password !== saltedHash) return res.status(401).end("access denied");
        // initialize cookie
        res.setHeader('Set-Cookie', cookie.serialize('username', username, {
            path : '/',
            maxAge: 60 * 60 * 24 * 7
        }));
        req.session.username = username;
        return res.json("user " + username + " signed in");
    });
});



/*    get methods     */
// return last created images
app.get('/api/images/', isAuthenticated, function(req, res, next) {
    images.findOne({}).sort({createdAt:-1}).limit(1).exec(function(err, image) {
        if (err) return res.status(500).end(err.message);
        if (!image) return res.status(404).end("doesn't have the latest image");
        return res.json(image);
    });
});

app.get('/api/images/prev/:imageId/:author/', isAuthenticated, function(req, res, next){
    images.findOne({author: req.params.author, _id: req.params.imageId}, function(err, image){
        if (err) return res.status(500).end(err.message);
        if (!image) return res.status(404).end("image with id:" + req.params.imageId + "does not exist");
        images.findOne({author: req.params.author, createdAt: {$lt: image.createdAt}})
            .sort({createdAt:-1}).limit(1).exec(function(err, image) {
            return res.json(image);
        });
    });
});

app.get('/api/images/next/:imageId/:author/', isAuthenticated, function(req, res, next){
    images.findOne({author: req.params.author, _id: req.params.imageId}, function(err, image){
        if (err) return res.status(500).end(err.message);
        if (!image) return res.status(404).end("image with id:" + req.params.imageId + "does not exist");
        images.findOne({author: req.params.author, createdAt: {$gt: image.createdAt}})
            .sort({createdAt:1}).limit(1).exec(function(err, image) {
            return res.json(image);
        });
    });
});

// return the image object stored in database with the imageId
app.get('/api/images/:imageId/', isAuthenticated, function(req, res, next) {
    images.findOne({_id: req.params.imageId}, function(err, image){
        if (err) return res.status(500).end(err.message);
        if (!image) return res.status(404).end("image with id:" + req.params.imageId + "does not exist");
        return res.json(image);
    });
});

// return the picture that has the required imageId
app.get('/api/images/:imageId/picture/', isAuthenticated, function(req, res, next) {
    images.findOne({_id: req.params.imageId}, function(err, image) {
        if (err) return res.status(500).end(err.message);
        if (image === null) {
            return res.json(null);
        } else {
            res.setHeader('Content-Type', image.image.mimetype);
            res.sendFile(path.join(__dirname, image.image.path));
        }
    });
});

// return the comments according to the current Image and its current comment page
// return the comments in the reverse order
app.get('/api/comments/:imageId/:pageIndex/', isAuthenticated, function(req, res, next) {
    comments.find({imageId: req.params.imageId}).sort({createdAt:-1}).limit((req.params.pageIndex+1)*10)
        .exec(function(err, comments) {
            if (comments.length <= req.params.pageIndex*10) {
                return res.json(null);
            } else {
                images.update({_id: req.params.imageId}, {$set: {currentCommentPage: req.params.pageIndex}}, {}, function(err, res) {
                    if (err) return res.status(500).end(err.message);
                });
                return res.json(comments.slice(req.params.pageIndex*10, req.params.pageIndex*10 + 10).reverse());
            }
        });
});


app.get('/signout/', function (req, res, next) {
    req.session.destroy();
    res.setHeader('Set-Cookie', cookie.serialize('username', '', {
        path : '/',
        maxAge: 60 * 60 * 24 * 7 // 1 week in number of seconds
    }));
    return res.json("success log out");
    // res.redirect('/');
});

// get the latest image for a user
app.get('/api/users/image/:username/', isAuthenticated, function(req, res, next) {
    let username = req.params.username;

    images.findOne({author: username}, function(err, image) {
        if (err) return res.status(500).end(err.message);
        if (!image) return res.status(404).end("image with username: " + req.params.username + " not found");
        return res.json(image);
    });
});

// get the images in a certain page for a user
app.get('/api/users/list/:pageIndex/', isAuthenticated, function(req, res, next) {
    users.find({}).sort({createdAt:-1}).limit(5).exec(function(err, users) {
        if (err) return res.status(500).end(err.message);
        return res.json(users);
    });
});



/*      delete methods    */
// delete an image with the given imageid
app.delete('/api/images/:imageId/', isAuthenticated, function(req, res, next) {
    images.findOne({_id: req.params.imageId}, function(err, image) {
        if (err) return res.status(500).end(err.message);
        if (image === null) {
            return res.json(null);
        } else {
            // get the next and previous image Id;
            let prevImageId = image.prevImageId;
            let nextImageId = image.nextImageId;

            // remove the image and according comments from the database
            images.remove({_id: req.params.imageId}, {}, function(err, numRemoved) {
                if (err) return res.status(500).end(err.message);
            });
            comments.remove({imageId: req.params.imageId}, {multi: true}, function(err, numRemoved){
                if (err) return res.status(500).end(err.message);
            });

            // find the previous image and next image and update their nextImageId and prevImageid
            // accordingly
            images.findOne({_id: prevImageId}, {}, function(err, prevImage) {
                if (err) return res.status(500).end(err.message);
                images.findOne({_id: nextImageId}, {}, function(err, nextImage) {
                    if (err) return res.status(500).end(err.message);
                    if (nextImage !== null) {
                        images.update({_id: nextImageId}, {$set: {prevImageId: prevImageId}}, {}, function(err, res) {
                            if (err) return res.status(500).end(err.message);
                        });
                    }
                    if (prevImage !== null) {
                        images.update({_id: prevImageId}, {$set: {nextImageId: nextImageId}}, {}, function(err, res) {
                            if (err) return res.status(500).end(err.message);
                        });
                        return res.json(prevImage);
                    }
                    return res.json(nextImage);
                });
            });
        }
    });
});

// delete one comment according to its commentId
app.delete('/api/comments/:commentId/', isAuthenticated, function(req, res, next) {
    comments.remove({_id: req.params.commentId}, {}, function(err, numRemoved){
        if (err) return res.status(500).end(err.message);
    });
    return res.json(null);
});



const http = require('http');
const PORT = 3000;

http.createServer(app).listen(PORT, function (err) {
    if (err) console.log(err);
    else console.log("HTTP server on http://localhost:%s", PORT);
});